barplot(d, beside=TRUE, ylim = c(0, 1), legend.text = rownames(d), args.legend = lix(x = "topleft", bty = "n"))
teams <- c("bucks", "bulls", "cavs", "celtics", "clippers", "grizzlies", "hawks", "heat", "hornets", "jazz", "kings", "knicks", "lakers", "magic", "mavs", "nets", "nuggets", "pacers", "pelicans", "pistons", "raptors", "rockets", "sixers", "spurs", "suns", "tbwolves", "tblazers", "warriors", "wizards")
vegasWin <- c(0.701, 0.563, 0.523, 0.601, 0.828, 0.489, 0.582, 0.68, 0.658, 0.636, 0.930, 0.763, 0.89, 0.852, 0.828, 0.852, 0.701, 0.852, 0.721, 0.601, 0.619, 0.457, 0.91, 0.418, 0.701, 0.619, 0.742, 0.457, 0.710)
estimateWin <- c(0.601, 0.612, 0.499, 0.549, 0.471, 0.561, 0.726, 0.667, 0.599, 0.555, 0.659, 0.609, 0.701, 0.663, 0.658, 0.651, 0.523, 0.611, 0.716, 0.669, 0.585, 0.463, 0.694, 0.514, 0.669, 0.550, 0.585, 0.477, 0.537)
d <- data.frame(row.names = teams, vegas_odds = vegasWin, model_odds = estimateWin)
d <- do.call(rbind, d)
barplot(d, beside=TRUE, ylim = c(0, 1), legend.text = rownames(d), args.legend = list(x = "topleft", bty = "n"))
teams <- c("bucks", "bulls", "cavs", "celtics", "clippers", "grizzlies", "hawks", "heat", "hornets", "jazz", "kings", "knicks", "lakers", "magic", "mavs", "nets", "nuggets", "pacers", "pelicans", "pistons", "raptors", "rockets", "sixers", "spurs", "suns", "tbwolves", "tblazers", "warriors", "wizards")
vegasWin <- c(0.701, 0.563, 0.523, 0.601, 0.828, 0.489, 0.582, 0.68, 0.658, 0.636, 0.930, 0.763, 0.89, 0.852, 0.828, 0.852, 0.701, 0.852, 0.721, 0.601, 0.619, 0.457, 0.91, 0.418, 0.701, 0.619, 0.742, 0.457, 0.710)
estimateWin <- c(0.601, 0.612, 0.499, 0.549, 0.471, 0.561, 0.726, 0.667, 0.599, 0.555, 0.659, 0.609, 0.701, 0.663, 0.658, 0.651, 0.523, 0.611, 0.716, 0.669, 0.585, 0.463, 0.694, 0.514, 0.669, 0.550, 0.585, 0.477, 0.537)
d <- data.frame(row.names = teams, vegas_odds = vegasWin, model_odds = estimateWin)
d <- do.call(rbind, d)
barplot(d, beside=TRUE, ylim = c(0, 1), legend.text = rownames(d), names.arg = teams, args.legend = list(x = "topleft", bty = "n"))
teams <- c("bucks", "bulls", "cavs", "celtics", "clippers", "grizzlies", "hawks", "heat", "hornets", "jazz", "kings", "knicks", "lakers", "magic", "mavs", "nets", "nuggets", "pacers", "pelicans", "pistons", "raptors", "rockets", "sixers", "spurs", "suns", "tbwolves", "tblazers", "warriors", "wizards")
vegasWin <- c(0.701, 0.563, 0.523, 0.601, 0.828, 0.489, 0.582, 0.68, 0.658, 0.636, 0.930, 0.763, 0.89, 0.852, 0.828, 0.852, 0.701, 0.852, 0.721, 0.601, 0.619, 0.457, 0.91, 0.418, 0.701, 0.619, 0.742, 0.457, 0.710)
estimateWin <- c(0.601, 0.612, 0.499, 0.549, 0.471, 0.561, 0.726, 0.667, 0.599, 0.555, 0.659, 0.609, 0.701, 0.663, 0.658, 0.651, 0.523, 0.611, 0.716, 0.669, 0.585, 0.463, 0.694, 0.514, 0.669, 0.550, 0.585, 0.477, 0.537)
d <- data.frame(row.names = teams, vegas_odds = vegasWin, model_odds = estimateWin)
d <- do.call(rbind, d)
par(lars = 2)
barplot(d, beside=TRUE, ylim = c(0, 1), legend.text = rownames(d), names.arg = teams, args.legend = list(x = "topleft", bty = "n"))
teams <- c("bucks", "bulls", "cavs", "celtics", "clippers", "grizzlies", "hawks", "heat", "hornets", "jazz", "kings", "knicks", "lakers", "magic", "mavs", "nets", "nuggets", "pacers", "pelicans", "pistons", "raptors", "rockets", "sixers", "spurs", "suns", "tbwolves", "tblazers", "warriors", "wizards")
vegasWin <- c(0.701, 0.563, 0.523, 0.601, 0.828, 0.489, 0.582, 0.68, 0.658, 0.636, 0.930, 0.763, 0.89, 0.852, 0.828, 0.852, 0.701, 0.852, 0.721, 0.601, 0.619, 0.457, 0.91, 0.418, 0.701, 0.619, 0.742, 0.457, 0.710)
estimateWin <- c(0.601, 0.612, 0.499, 0.549, 0.471, 0.561, 0.726, 0.667, 0.599, 0.555, 0.659, 0.609, 0.701, 0.663, 0.658, 0.651, 0.523, 0.611, 0.716, 0.669, 0.585, 0.463, 0.694, 0.514, 0.669, 0.550, 0.585, 0.477, 0.537)
d <- data.frame(row.names = teams, vegas_odds = vegasWin, model_odds = estimateWin)
d <- do.call(rbind, d)
par(las = 2)
barplot(d, beside=TRUE, ylim = c(0, 1), legend.text = rownames(d), names.arg = teams, args.legend = list(x = "topleft", bty = "n"))
help(rbinom)
pbinom(5, 10, 0.5)
pbinom(6, 10, 0.5)
pbinom(7, 10, 0.5)
pbinom8, 10, 0.5)
pbinom(8, 10, 0.5)
pbinom(9, 10, 0.5)
pbinom(4, 10, 0.5)
pbinom(0, 2, 0.5)
pbinom(1, 2, 0.5)
pnbinom(4, 7, 0.3)
pnbinom(4, 10, 0.3)
pnbinom(4, 4, 0.3)
pnbinom(5, 4, 0.3)
pnbinom(7, 4, 0.3)
pnbinom(6, 4, 0.3)
pnbinom(3, 4, 0.3)
pnbinom(1, 1, 0.3)
pnbinom(0, 1, 0.3)
pnbinom(0, 4, 0.3)
pnbinom(1, 4, 0.3)
pnbinom(2, 4, 0.3)
pnbinom(3, 4, 0.3)
dbinom(4, 5, 0.8)
qbinom(4, 16, 0.35)
qbinom(.5, 6, 1/3)
pbinom(5, 10, 0.5)
pbinom(5, 20, 0.5)
pbinom(6, 20, 0.5)
pbinom(10, 20, 0.5)
pbinom(20, 200, 0.09)
1-0.7384574
pbinom(10, 20, 0.5)
pbinom(10, 200, 0.09)
help(pnorm)
help pnorm
help(norm)
pnorm(28.5, 27, 10)
1/1.91
1.91*0.559 - 1
27*16
16*16*10
27*16
pbinom(19, 200, 0.09)
1-0.6552632
pnorm(28.5, 27, 100)
pnorm(28.5, 27, sqrt(10))
0.6823719*1.91
pnorm(0, 5, 35)
pnorm(5, 5, 35)
pnorm(5.5, 5, 35)
2.2/1.2
0.505699*1.83333
pnorm(0, 5, 35)
pnorm(0, 5, sqrt(35))
pnorm(5.5, 5, sqrt(35))
0.5337*2.2/1.2
0.5337*2.1/1.1
setwd("C:/Users/liaos/OneDrive/Documents/NFL Spreads")
NFLSpreads <- read.csv("NFLSpreads.csv", stringsAsFactors=FALSE)
NFLSpreads$HomeWin = 0
NFLSpreads$HomeWin[NFLSpreads$Home == NFLSpreads$Winner] = 1
hist(NFLSpreads$ScoreTotal)
View(NFLSpreads)
View(NFLSpreads)
hist(NFLSpreads$ScoreTotal)
hist(NFLSpreads$ScoreTotal)
setwd("C:/Users/liaos/OneDrive/Documents/NFL Spreads")
NFLSpreads <- read.csv("NFLSpreads.csv", stringsAsFactors=FALSE)
NFLSpreads$HomeWin = 0
NFLSpreads$HomeWin[NFLSpreads$Home == NFLSpreads$Winner] = 1
hist(NFLSpreads$ScoreTotal)
(pbinom(4, 16, 0.3))/(1 - dbinom(5, 16, 0.3))
(pbinom(4, 16, 0.28))/(1 - dbinom(5, 16, 0.28))
max(NFLSpreads$SpreadDiff)
3+3
x <- 3
x <- "string"
kb <- read.csv("C:/Users/liaos/kobe.csv")
kb <- read.csv("C:/Users/liaos/Downloads/kobe.csv")
View(kb)
View(kb)
View(kb)
kb[3, 3]
kb[1, c(1,2,3,4,5)]
1
kb[c(1,2,3,4,5), 1]
kb[1, c(1:5)]
action_type <- kb$action_type
action_type
action_type[1:10]
action_type[c(1:10)]
action_type[c(1,2,5)]
action_type[1,2,5]
ot <- kb[kb$period > 4,]
View(ot)
View(kb)
kb[5,2]
dunk <- kb[kb$combined_shot_type == "Dunk",]
dunk$combined_shot_type
dunk$combined_shot_type[2]
portland <- kb[kb$opponent == 'POR',]
View(portland)
kb$shot_id[1:10]
kb[kb$shot_id,1:10]
table(kb$shot_zone_basic == "Mid-Range")
table(kb$shot_zone_basic)
plot(table(kb$shot_zone_basic))
summary(kb)
plot(table(kb$opponent))
table(kb$period > 4)
jumpShots <- kb[action_type == "Jump Shot",]
plot(table(jumpShots$opponent))
season[0]
kb$season[0]
kb$season[1]
kb$season[10000]
kb$season[10000] > kb$season[1]
install.packages("lubridate")
kb$new_game_date <- as.Date(kb$game_date)
View(kb)
kb$year <- year(kb$new_game_date)
library(lubridate)
kb$year <- year(kb$new_game_date)
View(kb)
View(kb)
mod <- lm(shot_distance ~ year, data = kb)
mod
summary(mod)
plot(kb$loc_x, kb$loc_y, pch = ".", xlim = c(-400, 400))
plot(kb$loc_x, kb$loc_y, pch = "-", xlim = c(-400, 400))
kb$side <- 0
kb$side[kb$loc_x > 0] <- 1
kb$side[kb$loc_x < 0] <- 2
View(kb)
View(kb)
table(kb$shot_made_flag)
tableLeft <- table(kb$shot_made_flag[kb$side  == 1])
tableRight <- table(kb$shot_made_flag[kb$side  == 1])
tableLeft <- table(kb$shot_made_flag[kb$side  == 2])
tableRight
tableLeft
prop.table(tableLeft)
prop.table(tableRIght)
prop.table(tableRight)
5781+3889 + 6719 + 4741
table(kb$shot_made_flag[kb$side  ==0])
5781+3889 + 6719 + 4741 + 1732 + 2835
plot(kb$loc_x, kb$loc_y, pch = ".", xlim = c(-400, 400))
setwd("C:/Users/liaos/Downloads/01.01.2016.CHA.at.TOR")
source("_functions.R")
library(jsonlite)
all.movements <- sportvu_convert_json("0021500492.json")
duck <- all.movements %>% select(-X)
## Get Three POint Shots
library(dplyr)
# setwd("/media/ladmin/Data1/Code/basketball/Sportvu")
library(foreach)
library(doParallel)
library(parallel)
source("_functions.R")
library(iterators)
library(stringr)
library(lubridate)
library(dplyr)
library(foreach)
library(doParallel)
install.packages('doParallel')
library(parallel)
library(iterators)
library(stringr)
library(lubridate)
all.movements %>% select(-X)
duck <- all.movements %>% select(x_loc)
View(duck)
View(all.movements)
View(all.movements)
duck <- all.movements %>% filter(player_Id == '-1')
duck <- all.movements %>% filter(player_id == '-1')
duck <- duck %>% filter(radius > 8)
mutatedDuck <- duck %>% mutate(threedist = ifelse(
x_loc < 47,
{
sqrt((x_loc - 5.25) ^ 2 + (y_loc - 25) ^ 2)
}, {
sqrt((x_loc - 88.75) ^ 2 + (y_loc - 25) ^ 2)
})
)
View(duck)
View(mutatedDuck)
View(duck)
doubleMutatedDuck <- mutatedDuck %>% mutate(threedistz = ifelse(
x_loc < 47,
{
sqrt((x_loc - 5.25) ^ 2 + (y_loc - 25) ^ 2 +
(radius - 10) ^ 2)
}, {
sqrt((x_loc - 88.75) ^ 2 +
(y_loc - 25) ^ 2 + (radius - 10) ^ 2)
}))
View(doubleMutatedDuck)
doubleMutatedDuck <- doubleMutatedDuck %>% arrange(quarter, desc(game_clock))
View(doubleMutatedDuck)
doubleMutatedDuck <- doubleMutatedDuck %>% distinct(game_clock, .keep_all = TRUE)
View(doubleMutatedDuck)
doubleMutatedDuck <- mutatedDuck %>% mutate(threedistz = ifelse(
x_loc < 47,
{
sqrt((x_loc - 5.25) ^ 2 + (y_loc - 25) ^ 2 +
(radius - 10) ^ 2)
}, {
sqrt((x_loc - 88.75) ^ 2 +
(y_loc - 25) ^ 2 + (radius - 10) ^ 2)
}))
doubleMutatedDuck <- doubleMutatedDuck %>% arrange(quarter, desc(game_clock))
doubleMutatedDuck2 <- doubleMutatedDuck %>% distinct(game_clock, .keep_all = TRUE)
View(doubleMutatedDuck)
df_game <- doubleMutatedDuck
View(df_game)
shot_break_end <- df_game %>% mutate(lead_game_clock = lead(game_clock, n = 1)) %>% filter(lag_game_clock - game_clock > 1) %>% distinct(game_clock, quarter)
shot_break_end <- df_game %>%
mutate(lead_game_clock = lead(game_clock, n = 1)) %>%
filter(game_clock - lead_game_clock > 1) %>%
distinct(game_clock, quarter) %>%
select(game_clock_end = game_clock, quarter)
View(shot_break_end)
shot_break_start <- df_game %>%
mutate(lag_game_clock = lag(game_clock, n = 1)) %>%
filter(lag_game_clock - game_clock > 1) %>%
distinct(game_clock, quarter) %>%
select(game_clock_start = game_clock, quarter)
r <- 1
newrow <- c(df_game$game_clock[1], df_game$quarter[1])  # Start with first
NEWROW
newrow
length <- nrow(shot_break_start)
shot_row <- shot_break_start[length, ]
shot_row
shot_break_start <- insertRow(shot_break_start, newrow, r)
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r + 1, nrow(existingDF) + 1), ] <- existingDF[
seq(r, nrow(existingDF)), ]
existingDF[r, ] <- newrow
existingDF
}
length
shot_row
shot_break_start <- insertRow(shot_break_start, newrow, r)
shot_break_start
shot_break_end <- bind_rows(shot_break_end, shot_row)
shot_break_end
shot_break <- cbind(shot_break_start, shot_break_end)
shot_break
View(shot_break)
sumtotal <- NULL
for (i in 1:nrow(shot_break)) {
df_event <- df_game %>%
filter(quarter == shot_break$quarter[i] &
game_clock <= shot_break$game_clock_start[i] &
game_clock > shot_break$game_clock_end[i]) %>%
filter(max(threedist) - min(threedist) > 22) %>% mutate(shot_id = i)
sumtotal <- bind_rows(df_event, sumtotal)
}
View(sumtotal)
pbp_shot <- pbp %>%
select(EVENTNUM, EVENTMSGTYPE, EVENTMSGACTIONTYPE, HOMEDESCRIPTION,
VISITORDESCRIPTION, PCTIMESTRING, PERIOD, PLAYER1_ID)
pbp_shot$HOMEDESCRIPTION <- as.character(pbp_shot$HOMEDESCRIPTION)
pbp_shot$VISITORDESCRIPTION <- as.character(pbp_shot$VISITORDESCRIPTION)
pbp_shot$threepoint <- ifelse(
grepl("3PT", pbp_shot$VISITORDESCRIPTION) |
grepl("3PT", pbp_shot$HOMEDESCRIPTION), 1, 0)
pbp_shot <- pbp_shot %>% filter(threepoint == 1)
pbp_shot$game_clock <- period_to_seconds(
ms(as.character(pbp_shot$PCTIMESTRING)))
get_pbp(0021500492)
URL1 <- paste("http://stats.nba.com/stats/playbyplayv2?EndPeriod=10&EndRange=55800&GameID=0021500492&RangeType=2&StartPeriod=1&StartRange=0")
URL1
the.data.file <- fromJSON(URL1)
View(duck)
the.data.file <- fromJSON('0021500492PBP.json')
the.data.file <- fromJSON('0021500492PBP.json')
the.data.file <- fromJSON("0021500492PBP.json")
validate("0021500492PBP.json")
validate("0021500492PBP.json")
validate("0021500492.json")
the.data.file <- fromJSON("0021500492.json")
all.movements <- sportvu_convert_json("0021500492.json")
setwd("C:/Users/liaos/Downloads/01.01.2016.CHA.at.TOR")
all.movements2 <- sportvu_convert_json("0021500492.json")
plot(3, 4)
library(dplyr)
setwd("C:/Users/liaos/OneDrive/Documents/Brown/Senior Year/GISP_final")
pathWarriors = "./data/shots/"
pathRockets = "./data/HOU_shots/"
teamThrees <- function(path){
file.names <- dir(path, pattern =".csv")
listOfGames <- list()
for (i in 1:length(file.names)) {
temp <- read.csv(paste0(substring(path, 3), file.names[i]))
listOfGames[[i]] <- temp
}
# Combine all the games into one data frame
teamShots <- bind_rows(listOfGames)
}
warriors <- teamThrees(pathWarriors)
rockets <- teamThrees(pathRockets)
warriorsMissing <- read.csv("data/missingHeightsWarriors.csv")
warriorsMissing <- warriorsMissing[,c(-1)]
warriorsNotMissing <- warriors[!(is.na(warriors$height_difference)),]
warriors <- rbind(warriorsMissing, warriorsNotMissing)
warriors$height_difference <- warriors$shooter_height - warriors$defender_height
steph <- warriors[warriors$shooter_firstname == 'Stephen',]
steph <- steph[steph$shot_dist > 21,]
shotMakeMod <<- glm(shot_outcome ~ distance + shooter_height + defender_height + shot_dist + def_angle + LeftOrRight
,data = steph, family = "binomial")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, def_angle = 40, LeftOrRight = 'Left')
predict(shotMakeMod, newdata = test, type = "response")
tidy(shotMakeMod, exponentiate = T, conf.int = T)
library(broom)
tidy(shotMakeMod, exponentiate = T, conf.int = T)
prob <- predict(shotMakeMod)
pred <- prediction(prob, steph$shot_outcome)
perf <- performance(pred, 'tpr', 'fpr')
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) + geom_abline(intercept = 0, slope = 1,
colour = "blue")+
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
prob <- predict(shotMakeMod)
pred <- prediction(prob, steph$shot_outcome)
perf <- performance(pred, 'tpr', 'fpr')
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) + geom_abline(intercept = 0, slope = 1,
colour = "blue")+
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
library(ggplot2)
library(ROCR)
prob <- predict(shotMakeMod)
pred <- prediction(prob, steph$shot_outcome)
perf <- performance(pred, 'tpr', 'fpr')
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) + geom_abline(intercept = 0, slope = 1,
colour = "blue")+
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
tidy(shotMakeMod, exponentiate = T, conf.int = T)
tidy(shotMakeMod, exponentiate = T)
aic_shotMakeMod <- stepAIC(shotMakeMod, direction="backward", k=2)
library(MASS)
aic_shotMakeMod <- stepAIC(shotMakeMod, direction="backward", k=2)
tidy(aic_shotMakeMod)
prob <- predict(aic_shotMakeMod)
pred <- prediction(prob, steph$shot_outcome)
perf <- performance(pred, 'tpr', 'fpr')
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) + geom_abline(intercept = 0, slope = 1,
colour = "blue")+
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
shotMakeMod <<- glm(shot_outcome ~ distance + shooter_height + defender_height + shot_dist + def_angle*LeftOrRight
,data = steph, family = "binomial")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, def_angle = 40, LeftOrRight = 'Left')
predict(shotMakeMod, newdata = test, type = "response")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, def_angle = 40, LeftOrRight = 'Right')
predict(shotMakeMod, newdata = test, type = "response")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, def_angle = 5, LeftOrRight = 'Left')
predict(shotMakeMod, newdata = test, type = "response")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, def_angle = 5, LeftOrRight = 'Right')
predict(shotMakeMod, newdata = test, type = "response")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, def_angle = 1, LeftOrRight = 'Left')
predict(shotMakeMod, newdata = test, type = "response")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, def_angle = 1, LeftOrRight = 'Right')
predict(shotMakeMod, newdata = test, type = "response")
tidy(shotMakeMod)
steph$trueAngle <- steph$def_angle
steph$trueAngle[steph$LeftOrRight == "Left"] = -1*steph$trueAngle[steph$LeftOrRight == "Left"]
nrow(steph$[steph$LeftOrRight == "Left",])
nrow(steph$[steph$LeftOrRight == "Left",])
nrow(steph[steph$LeftOrRight == "Left",])
shotMakeMod <<- glm(shot_outcome ~ distance + shooter_height + defender_height + shot_dist + trueAngle
,data = steph, family = "binomial")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, trueAngle = 1)#def_angle = 5, LeftOrRight = 'Left')
predict(shotMakeMod, newdata = test, type = "response")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, trueAngle = -1)#def_angle = 5, LeftOrRight = 'Left')
predict(shotMakeMod, newdata = test, type = "response")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, trueAngle = 75)#def_angle = 5, LeftOrRight = 'Left')
predict(shotMakeMod, newdata = test, type = "response")
test <- data.frame(distance = 0.5, shooter_height = 170, defender_height = 170,
shot_dist = 23, trueAngle = -23)#def_angle = 5, LeftOrRight = 'Left')
predict(shotMakeMod, newdata = test, type = "response")
# Create the logistic regression with output variable shot_outcome
shotMakeMod <<- glm(shot_outcome ~ shot_clock + quarter + quarter_clock + shooter_X + shooter_Y
+ distance + shooter_height + defender_height + shot_dist + trueAngle
,data = steph, family = "binomial")
tidy(shotMakeMod)
aic_shotMakeMod <- stepAIC(shotMakeMod, direction="backward", k=2)
tidy(aic_shotMakeMod)
shotMakeMod <<- glm(shot_outcome ~ shot_clock + quarter + quarter_clock + shooter_X + shooter_Y
+ distance + shooter_height + defender_height + shot_dist + trueAngle
,data = steph, family = "binomial")
aic_shotMakeMod <- stepAIC(shotMakeMod, direction="backward", k=2)
tidy(aic_shotMakeMod)
tidy(shotMakeMod)
aic_shotMakeMod <- stepAIC(shotMakeMod, direction="backward", k=2)
aic_shotMakeMod
summary(aic_shotMakeMod)
duck <- stepAIC(shotMakeMod, direction="backward", k=2)
tidy(duck)
shotMakeMod <<- glm(shot_outcome ~ shot_clock + quarter + quarter_clock + shooter_X + shooter_Y
+ distance + shooter_height + defender_height + shot_dist + trueAngle
,data = steph, family = "binomial")
duck <- stepAIC(shotMakeMod, direction="backward", k=2)
aic_shotMakeMod <- stepAIC(shotMakeMod, direction="backward", k=2)
View(steph)
steph <- na.omit(steph)
steph <- na.omit(steph)
shotMakeMod <<- glm(shot_outcome ~ shot_clock + quarter + quarter_clock + shooter_X + shooter_Y
+ distance + shooter_height + defender_height + shot_dist + trueAngle
,data = steph, family = "binomial")
aic_shotMakeMod <- stepAIC(shotMakeMod, direction="backward", k=2)
tidy(aic_shotMakeMod)
prob <- predict(aic_shotMakeMod)
pred <- prediction(prob, steph$shot_outcome)
perf <- performance(pred, 'tpr', 'fpr')
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) + geom_abline(intercept = 0, slope = 1,
colour = "blue")+
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
shotMakeMod <<- glm(shot_outcome ~ shot_clock + quarter + quarter_clock + shooter_X + shooter_Y
+ distance + shooter_height + defender_height + shot_dist + def_angle + LeftOrRight
,data = steph, family = "binomial")
aic_shotMakeMod <- stepAIC(shotMakeMod, direction="backward", k=2)
prob <- predict(aic_shotMakeMod)
pred <- prediction(prob, steph$shot_outcome)
perf <- performance(pred, 'tpr', 'fpr')
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="GLM")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) + geom_abline(intercept = 0, slope = 1,
colour = "blue")+
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
tidy(aic_shotMakeMod)
View(steph)
